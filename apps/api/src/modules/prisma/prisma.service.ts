/**
 * Prisma Service
 *
 * Wrapper around Prisma Client that integrates with NestJS lifecycle.
 * Provides type-safe database access with automatic connection management.
 *
 * This service:
 * - Extends the generated Prisma Client from the schema
 * - Implements NestJS OnModuleDestroy for graceful shutdown
 * - Provides type interfaces for database operations
 * - Handles database disconnection on application shutdown
 *
 * The Prisma Client is generated from the schema at:
 * apps/api/prisma/schema.prisma
 *
 * TypeScript interfaces ensure type safety for database operations
 * even before Prisma Client generation completes.
 */

import { INestApplication, Injectable, OnModuleDestroy } from '@nestjs/common';
import { join } from 'node:path';

/**
 * Prisma Client constructor options
 * Allows overriding database connection string at runtime
 */
interface PrismaClientOptions {
  datasources?: {
    db?: {
      url?: string;
    };
  };
}

/**
 * User entity shape from database
 * Matches the User model in Prisma schema
 */
interface UserEntity {
  id: string;
  walletAddress: string;
  nonce: string;
  email: string | null;
  createdAt: Date;
  lastLoginAt: Date | null;
}

/**
 * Arguments for upserting a user
 * Used during SIWE nonce generation to create or update user records
 */
interface UserUpsertArgs {
  where: {
    walletAddress: string;
  };
  update: {
    nonce: string;
  };
  create: {
    walletAddress: string;
    nonce: string;
  };
}

/**
 * Arguments for finding a unique user with optional field selection
 * Supports partial selection to reduce data transfer
 */
interface UserFindUniqueArgs {
  where: {
    walletAddress: string;
  };
  select?: {
    id?: boolean;
    walletAddress?: boolean;
    nonce?: boolean;
    email?: boolean;
    createdAt?: boolean;
    lastLoginAt?: boolean;
  };
}

/**
 * Arguments for updating user data
 * Used during SIWE verification to refresh nonce and update lastLoginAt
 */
interface UserUpdateArgs {
  where: {
    walletAddress: string;
  };
  data: {
    nonce?: string;
    lastLoginAt?: Date;
  };
}

/**
 * Arguments for deleting a user
 * Used in tests for cleanup operations
 */
interface UserDeleteArgs {
  where: {
    walletAddress: string;
  };
}

/**
 * Result type for user find operations
 * Can be full entity, partial entity (when using select), or null if not found
 */
type UserFindResult = UserEntity | Partial<UserEntity> | null;

/**
 * Prisma Client instance interface
 * Defines the shape of the generated Prisma Client
 * Provides type safety for database operations
 */
interface PrismaClientInstance {
  user: {
    upsert(args: UserUpsertArgs): Promise<UserEntity>;
    findUnique(args: UserFindUniqueArgs): Promise<UserFindResult>;
    update(args: UserUpdateArgs): Promise<UserEntity>;
    delete(args: UserDeleteArgs): Promise<UserEntity>;
  };
  $on(event: 'beforeExit', listener: () => Promise<void> | void): void;
  $disconnect(): Promise<void>;
}

/**
 * Prisma Client constructor type
 * Used to type the dynamically loaded Prisma Client
 */
type PrismaClientConstructor = new (options?: PrismaClientOptions) => PrismaClientInstance;

/**
 * Load generated Prisma Client from output directory
 * The client is generated by `prisma generate` command
 * and placed in apps/api/generated/prisma/client
 */
const { PrismaClient: PrismaClientBase } = require(
  join(__dirname, '../../../generated/prisma/client'),
) as {
  PrismaClient: PrismaClientConstructor;
};

/**
 * Prisma Service
 *
 * NestJS-integrated database client with lifecycle management.
 * Automatically connects on application start and disconnects on shutdown.
 *
 * Usage:
 * ```typescript
 * @Injectable()
 * export class AuthService {
 *   constructor(private readonly prisma: PrismaService) {}
 *
 *   async findUser(address: string) {
 *     return this.prisma.user.findUnique({
 *       where: { walletAddress: address }
 *     });
 *   }
 * }
 * ```
 */
@Injectable()
export class PrismaService
  extends PrismaClientBase
  implements PrismaClientInstance, OnModuleDestroy
{
  /**
   * Enable graceful shutdown hooks
   *
   * Registers a listener for Prisma's 'beforeExit' event to ensure
   * the NestJS application closes properly when Prisma disconnects.
   * This is typically called in main.ts during application setup.
   *
   * @param app - NestJS application instance
   */
  async enableShutdownHooks(app: INestApplication): Promise<void> {
    this.$on('beforeExit', async () => {
      await app.close();
    });
  }

  /**
   * Cleanup on module destruction
   *
   * Called automatically by NestJS when the application shuts down.
   * Ensures database connections are properly closed to prevent
   * connection leaks and allow graceful shutdown.
   */
  async onModuleDestroy(): Promise<void> {
    await this.$disconnect();
  }
}
